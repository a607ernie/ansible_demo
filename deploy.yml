---
- name: Git pull with Ansible
  hosts: test_servers #可改，對應inventory.ini
  # hosts: localhost

  vars_files:
    - ./repositories_vars.yml
    - ./hosts_vars/web_servers.yml
  vars:
    git_repo: "{{ lookup('vars', selected_repo) }}"
    
  # become: yes
  # become_user: root
  # become_method: sudo

  tasks:
    - name: Choose repo
      set_fact:
        git_repo: "{{ item }}"
      loop: "{{ repositories }}"
      when: item.name == "{{ selected_repo }}"

    - name: Get path of remote host
      set_fact:
        dest_path: "{{ vars.web_servers_git_path.vars[git_repo.name][inventory_hostname] }}"

    - name: Show the repo name
      debug:
        msg: "{{ git_repo }}"

    - name: Check if destination path exists
      stat:
        path: "{{ dest_path }}"
      register: dest_path_stat

    - name: Clone the repository if the path does not exist
      git:
        repo: "{{ git_repo.url }}"
        dest: "{{ dest_path }}"
        version: "{{ git_repo.branch }}"
      when: not dest_path_stat.stat.exists

    - name: Fetch remote updates and prune old references
      command: git fetch --prune origin
      args:
        chdir: "{{ dest_path }}"
      when: dest_path_stat.stat.exists

    - name: Ensure local branch tracks remote branch
      command: git branch --set-upstream-to=origin/{{ git_repo.branch }} {{ git_repo.branch }}
      args:
        chdir: "{{ dest_path }}"
      when: dest_path_stat.stat.exists

    - name: Reset local branch to match remote
      command: git reset --hard origin/{{ git_repo.branch }}
      args:
        chdir: "{{ dest_path }}"
      when: dest_path_stat.stat.exists

    - name: Clean untracked files
      command: git clean -fd
      args:
        chdir: "{{ dest_path }}"
      when: dest_path_stat.stat.exists

    - name: Pull the latest changes from remote
      git:
        repo: "{{ git_repo.url }}"
        dest: "{{ dest_path }}"
        version: "{{ git_repo.branch }}"
        update: yes
      when: dest_path_stat.stat.exists
      register: git_result

    - name: Show git module output
      debug:
        msg: "Git module output: {{ git_result }}"